%----------------------------------------------------------------------------------------
%	PA%----------------------------------------------------------------------------------------
%	PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass{article}
\usepackage[sc]{mathpazo} % Use the Palatino font
\usepackage[T1]{fontenc} % Use 8-bit encoding that has 256 glyphs
\linespread{1.05} % Line spacing - Palatino needs more space between lines
\usepackage{microtype} % Slightly tweak font spacing for aesthetics
\usepackage{amsmath,amssymb,array}

\usepackage[english]{babel} % Language hyphenation and typographical rules

\usepackage[margin=1in,columnsep=20pt]{geometry} % Document margins
\usepackage[hang, small,labelfont=bf,up,textfont=it,up]{caption} % Custom captions
\usepackage{booktabs} % Horizontal rules in tables
% \usepackage{subfig} % Sub figures
\usepackage{caption}
\usepackage{subcaption}
\usepackage{graphicx} % better graphics
\usepackage{float}
\usepackage[dvipsnames]{xcolor} % colors

\usepackage{enumitem} % Customized lists
\setlist[itemize]{noitemsep} % Make itemize lists more compact

\usepackage[T1]{fontenc}
\usepackage{listings} % for numbers in code chunks

% macro to select a scaled-down version of Bera Mono (for instance)
\makeatletter
\newcommand\BeraMonottfamily{%
  \def\fvm@Scale{0.85}% scales the font down
  \fontfamily{fvm}\selectfont% selects the Bera Mono font
}
\makeatother

\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}
\lstset{
  backgroundcolor=\color{shadecolor},
  basicstyle=\BeraMonottfamily,
  frame=single,
}

% Removing the kframe command makes the listings and code customization
% work better - specifically, it removes the extra shaded line outside the
% framed box
\usepackage{framed}
\makeatletter
\renewenvironment{kframe}{%
 % \def\at@end@of@kframe{}%
 % \ifinner\ifhmode%
 %  \def\at@end@of@kframe{\end{minipage}}%
 %  \begin{minipage}{\columnwidth}%
 % \fi\fi%
 % \def\FrameCommand##1{\hskip\@totalleftmargin \hskip-\fboxsep
 % \colorbox{shadecolor}{##1}\hskip-\fboxsep
 %     % There is no \\@totalrightmargin, so:
 %     \hskip-\linewidth \hskip-\@totalleftmargin \hskip\columnwidth}%
 % \MakeFramed {\advance\hsize-\width
 %   \@totalleftmargin\z@ \linewidth\hsize
 %   \@setminipage}}%
 % {\par\unskip\endMakeFramed%
 % \at@end@of@kframe
 }
\makeatother


\usepackage{hyperref} % For hyperlinks in the PDF
% \usepackage{nameref} % doesn't handle capitalization properly
\usepackage{cleveref}% \Cref command automatically handles figure/table/etc refs

\usepackage{natbib}
\bibliographystyle{abbrvnat}

% Commands for editing
\newcommand{\hh}[1]{{\textcolor{orange}{#1}}}
\newcommand{\svp}[1]{{\textcolor{blue}{#1}}}
\newcommand{\au}[1]{{\textcolor{ForestGreen}{#1}}}

\newcommand{\code}[1]{\texttt{{#1}}}
\newcommand{\pkg}[1]{\texttt{{#1}}}
%----------------------------------------------------------------------------------------
%	TITLE SECTION
%----------------------------------------------------------------------------------------

\title{Penguins Go Parallel: a grammar of graphics framework for generalized parallel coordinate plots} % Article title
\author{%
\textsc{Author 1}$^1$\thanks{Corresponding author: \href{mailto:xxx}{xxx}}\hspace{2em}
\textsc{Author 2}$^2$\hspace{2em}
\textsc{Author 3}$^3$\\[1ex] % Your name
{\footnotesize
$^1$ University 1;
$^2$ University 2;
$^3$ University 3
} %
}
\date{\today} % Leave empty to omit a date

%----------------------------------------------------------------------------------------

\begin{document}

% Print the title
\maketitle
\begin{abstract}
\noindent
\noindent Parallel coordinate plots (PCP) are a valuable tool for exploratory data analysis of high-dimensional numerical data. The use of PCPs is limited when working with categorical variables or a mix of categorical and continuous  variables. In this paper, we propose generalized parallel coordinate plots (GPCP) to extend the ability of PCPs from just numeric variables to dealing seamlessly with a mix of categorical and numeric variables in a single plot. In this process we find that existing solutions for categorical values only, such as hammock plots or parsets become edge cases in the new framework. By focusing on individual observations rather than a marginal frequency we gain additional flexibility. The resulting approach is implemented in the R package ggpcp.

\end{abstract}

%\tableofcontents
%----------------------------------------------------------------------------------------
%	ARTICLE CONTENTS
%----------------------------------------------------------------------------------------

<<setup, echo=FALSE, cache=FALSE, warning=FALSE, message=FALSE>>=
library(knitr)
knitr::opts_chunk$set(fig.path="figures/", echo=FALSE, out.width = '\\linewidth', warning=FALSE, message=FALSE, cache = TRUE)


@


%\hh{XXX polyline or poly-line?} % going with poly-line


<<setup2, echo=FALSE, cache=FALSE>>=
knit_hooks$set(source = function(x, options) {
    paste("\\begin{lstlisting}[numbers=left, firstnumber=last]\n", x,
        "\\end{lstlisting}\n", sep = "")
})
knit_hooks$set(reset = function(before, options, envir){
if(before){
    return("\\setcounter{lstnumber}{1}")
}
})
@

<<packages, echo=FALSE, cache=FALSE, warning=FALSE, message=FALSE>>=
library(tidyverse)
library(ggpcp)
library(gridExtra)

theme_set(theme_bw())
@


<<penguin-colors, echo = F, include = F>>=
library(scales)

oranges <- c("#FDBF6F", "#F89D38", "#F37A00")
purples <- c("#CAB2D6", "#9A78B8", "#6A3D9A")
greens <- c("#b2df8a", "#73C05B", "#33a02c")

#cols <- hue_pal()(3)
# cols <- rev(c("#535993", "#C5D068", "#D4856A"))
cols <-  c(oranges[2], greens[2], purples[2])

# #####  Color Palette by Paletton.com
# #####  Palette URL: http://paletton.com/#uid=33W0V0kllllaFw0g0qFqFg0w0aF
#
#
# *** Primary color:
#
#    shade 0 = #323875 = rgb( 50, 56,117) = rgba( 50, 56,117,1) = rgb0(0.196,0.22,0.459)
#    shade 1 = #7D82B0 = rgb(125,130,176) = rgba(125,130,176,1) = rgb0(0.49,0.51,0.69)
#    shade 2 = #535993 = rgb( 83, 89,147) = rgba( 83, 89,147,1) = rgb0(0.325,0.349,0.576)
#    shade 3 = #191F58 = rgb( 25, 31, 88) = rgba( 25, 31, 88,1) = rgb0(0.098,0.122,0.345)
#    shade 4 = #080D3B = rgb(  8, 13, 59) = rgba(  8, 13, 59,1) = rgb0(0.031,0.051,0.231)
#
# *** Secondary color (1):
#
#    shade 0 = #9AA637 = rgb(154,166, 55) = rgba(154,166, 55,1) = rgb0(0.604,0.651,0.216)
#    shade 1 = #F1FAA6 = rgb(241,250,166) = rgba(241,250,166,1) = rgb0(0.945,0.98,0.651)
#    shade 2 = #C5D068 = rgb(197,208,104) = rgba(197,208,104,1) = rgb0(0.773,0.816,0.408)
#    shade 3 = #727D15 = rgb(114,125, 21) = rgba(114,125, 21,1) = rgb0(0.447,0.49,0.082)
#    shade 4 = #4A5300 = rgb( 74, 83,  0) = rgba( 74, 83,  0,1) = rgb0(0.29,0.325,0)
#
# *** Secondary color (2):
#
#    shade 0 = #AA5639 = rgb(170, 86, 57) = rgba(170, 86, 57,1) = rgb0(0.667,0.337,0.224)
#    shade 1 = #FFC0AA = rgb(255,192,170) = rgba(255,192,170,1) = rgb0(1,0.753,0.667)
#    shade 2 = #D4856A = rgb(212,133,106) = rgba(212,133,106,1) = rgb0(0.831,0.522,0.416)
#    shade 3 = #803015 = rgb(128, 48, 21) = rgba(128, 48, 21,1) = rgb0(0.502,0.188,0.082)
#    shade 4 = #551600 = rgb( 85, 22,  0) = rgba( 85, 22,  0,1) = rgb0(0.333,0.086,0)

@

% \au{Broad Comments:}
% \begin{itemize}
% \item \au{Replace fleas with penguins}
% \item \au{Make colors consistent - gentoo are always \_\_\_ color - but with a different (but consistent) color scheme in the clustering example.}
% \item \au{Leave out missing data until it's explicitly discussed in the example with labeled ? points}
% \end{itemize}

<<prep-raw-penguin, warning = FALSE>>=
library(palmerpenguins)

penguins1 <- penguins_raw
penguins1 <- penguins1 %>% separate(col=`Individual ID`, into=c("Nest", "Individ"), remove=FALSE, sep=-2)
names(penguins1)[12:15] <- c("CulmenL", "CulmenD", "FlipperL", "BodyMass")
penguins1 <- penguins1 %>% separate(Species, into=c("species", "foo2", "foo3", "foo4"), sep=" ") %>% select(-starts_with("foo")) # foos make R happy, because it doesn't throw away anything unexpected
@


\section{Introduction}

Few approaches in data visualization exist that are truly high-dimensional. Most visualizations are projections of data into two or three dimensions enhanced by facetting or additional mappings to plot aesthetics, such as point size and color.
Parallel coordinate plots are one of the exceptions: in parallel coordinate plots we can actually visualize an arbitrary number of variables to get a visual summary of a high-dimensional data set. In a parallel coordinate plot, each variable takes the role of a vertical (or parallel) axis; giving the visualization its name. Multivariate observations are then plotted by connecting their respective values on each axis across all axes using poly-lines (cf. \Cref{fig:sketch}). For just two variables this switch from orthogonal axes to parallel axes is equivalent to a switch from the familiar Euclidean geometry to the projective space. In the projective space, points take the role of lines, while lines are replaced by points, i.e. points falling on a line in the Euclidean space correspond to lines crossing in a single point in the projective space.
This duality provides a good basis for interpreting geometric features observed in a parallel coordinate plot \citep{Inselberg:1985}.

The origins of parallel coordinate plots date back to the 19th century and are, depending on the source, either attributed to  \citet{dOcagne:1885} or  \citet{Gannett:1880}.
Modern era parallel coordinate plots go back to  \citet{Inselberg:1985} and \citet{Wegman:1990}. Parallel coordinate plots are used in an exploratory setting as a way of getting a high-level overview of the marginal distributions involved, identifying outliers in the data, and  finding potential clusters of points. In the absence of those, Parallel Coordinate Plots are often criticized for the amount of clutter they produce, resembling a game of mikado (also known as pickup-sticks -- if you are not familiar with the game, imagine spilling a box of  spaghetti) rather than organized data.
This clutter is sometimes mitigated by the use of $\alpha$-blending \citep{alpha-blending}, density estimation \citep{density-pcp}, or edge-bundling parallel coordinate plots \citep{edge-bundling}. For a detailed overview of these and other techniques see \citet{review}.

<<sketch, warning=FALSE, results='asis', fig.width = 9, fig.height = 3, fig.cap="Sketch of a parallel coordinate plot of two observations in four dimensions. Each dimension is shown as a vertical axis, observations are connected by poly-lines from one axis to the next. Two penguins from the Palmer Penguin data set (see section 5.1) were sampled for this example.">>=
#df <- data.frame(x1 = c(1,2), x2 = c(0, 0.5), x3=c(2,1), x4=c(2,3), id=c(1,2))
df <- penguins
df_pcp <- df %>%
  pcp_select(bill_length_mm:body_mass_g) %>%
#  mutate(value = parse_number(as.character(value))) %>%
  pcp_scale()

df_pcp$Observation = paste0("Penguin #", df_pcp$pcp_id, " (", df_pcp$species,")")
df_pcp$Observation = paste0("Penguin #", df_pcp$pcp_id)

df_pcp %>%
  ggplot(aes_pcp())  +
  geom_pcp_axes() +
  geom_pcp(aes(colour = Observation), size=1,
           data = df_pcp %>% filter(pcp_id %in% c(1,275))) +
  geom_point(aes(shape=Observation, colour = Observation), size=5,
             data = df_pcp %>% filter(pcp_id %in% c(1,275))) +
  theme_bw() +
  xlab("") +
#  scale_shape_discrete("Observation") +
  scale_colour_manual("Observation", values=c("darkorange", "purple4")) +
  ylab("") +
  theme(axis.title.y = NULL, axis.text.y = NULL, axis.ticks.y = NULL) +
  scale_y_continuous(labels=c("low", "", "medium", "", "high"),
                     breaks=c(0,0.25, .5,.75, 1)) +
  scale_x_discrete(expand = expansion(add=0.2),
                   labels = c("Bill Length (mm)", "Bill Depth (mm)",
                              "Flipper Length (mm)", "Body Mass (g)"))
@

While parallel coordinate plots are a powerful tool, using categorical variables alongside quantitative variables is a great challenge. In current solutions, levels of categorical variables are transformed to numbers and variables are then used as if they were numeric. This introduces ties into the data, and the resulting parallel coordinate plot becomes uninformative, as it only shows a mesh of lines from each level of one variable to each level of the next variable.
Modifications of parallel coordinate plots have been specifically developed to deal with categorical data: parallel set plots \citep{Kosara:2006}, Hammock plots \citep{Schonlau:2003}, and common angle plots \citep{Hofmann:2013}; unfortunately, these solutions do not accommodate quantitative variables.
Instead, they are intended for use with tabular data and show bands of observations from one categorical variable to the next. Hammock plots and common angle plots mitigate effects of the sine-illusion \citep{sine, susan:2015} on parallel sets plots.
An attempt to combine categorical and numeric variables in a parallel coordinate plot is introduced in the categorical parallel coordinate plots of \citet{cpcp} by treating factor variables as numeric.
Similar to parallel sets, this approach is also based on marginal frequencies for the categorical variables.
Categorical parallel coordinate plots are the closest of these variations to our solution, but the \pkg{extracat} package has not been updated recently and is no longer on CRAN.
In this paper, we describe a generalization of parallel coordinate plots to accommodate both categorical and quantitative variables, developed using the grammar of graphics, implemented in the R package \pkg{ggpcp}. The resulting plots can be used to gain additional insights into multivariate data compared to plots created using other available software.



The remainder of the paper is organized as follows:
\Cref{sec:usage} introduces the \pkg{ggpcp} syntax and explains the improvements in \pkg{ggpcp} over other parallel coordinate plot software packages.
\Cref{sec:wrangling} describes the data processing for parallel coordinate plots and how this wrangling is separated from the plot rendering in \pkg{ggpcp}.
\Cref{sec:visual} discusses the rendering of parallel coordinate plots and factors such as plotting order and tie-breaking which are important for the design of PCPs.
\Cref{sec:examples} provides three examples which highlight the use of generalized PCPs in exploratory settings.
% Section 3  presents the conceptual framework of  generalized parallel coordinate plots and general principles informing their construction. Section 4 describes the connection between generalized parallel coordinates and the grammar of graphics. Section 5 provides three examples highlighting different aspects of the use of  generalized parallel coordinate plots in an exploratory setting.

\section{Motivation and Package Usage}\label{sec:usage}

An important motivation for the \pkg{ggpcp} package is that other implementations of parallel coordinate plots for categorical variables
%One significant motivation for adding another parallel coordinate package to CRAN is that other implementations of parallel coordinate plots
make it difficult to follow a single observation across the chart. \pkg{ggpcp} alleviates this difficulty with two new developments: careful treatment of categorical variables to prevent line intersections at vertical axes, which maintains the visual ability to follow individual cases  across the chart, and methods for ordering observations within categorical variables to reduce the amount of visual clutter. Together, these features allow for easier perception of lines in generalized parallel coordinate plots: by reducing the number of intersecting lines at pivot points along the vertical axes, we allow our brains to leverage the gestalt principle of good continuation to follow one line across the plot. Reducing the number of line crossings at non-axis points simplifies the plot, reducing the overall cognitive load required to "untangle" (literally and metaphorically) the individual observations.

In addition, \pkg{ggpcp} leverages  the full ggplot2 philosophy instead of using highly specific wrapper functions, allowing users to focus on the data, rather than the names of various parameters used for customization.
\pkg{ggpcp} adopts tidy conventions for data wrangling, separating the necessary data manipulation to generate a parallel coordinate plot from the visual rendering.
Scaling, ordering of cases, and the arrangement of the parallel axes are completed using  \code{pcp\_select}, \code{pcp\_arrange}, and \code{pcp\_scale},respectively; the resulting data frame is then passed directly into the familiar \code{ggplot()} call.
During the plotting state, the only modification from default \pkg{ggplot2} syntax is the use of \code{aes\_pcp()} in place of \code{aes()}; this is necessary to handle the multiple axes in a parallel coordinate plot while maintaining the ability to map all other variables of the original data frame to aesthetics such as linetype and color.
The user has complete control over layers such as PCP lines (\code{geom\_pcp}), labels (\code{geom\_pcp\_labels}), and boxes around categorical variables (\code{geom\_pcp\_boxes}), but there are additional advantages to the use of \pkg{ggplot2}.
Users can also augment their parallel coordinate plots with additional information, such as boxplots or violin plots, with standard ggplot2 syntax.




\begin{minipage}[b]{.94\linewidth}
\captionof{lstlisting}{A demonstration of ggpcp's data wrangling and plotting API. }\label{lst:ggpcp-api}
<<prep-data, echo=FALSE>>=
penguins <- rbind(
  penguins %>% filter(species=="Adelie"),
  penguins %>% filter(species=="Gentoo"),
  penguins %>% filter(species=="Chinstrap")
)
@

<<api-listing-code, echo=TRUE, reset=TRUE, error=FALSE, warning=FALSE>>=
pcp <- penguins %>%                       # data management:
  filter(!is.na(sex)) %>%                 #   seamless integration with tidy workflow
  pcp_select(4,3,5:6, sex, species) %>%   #   variable selection, see section 3.1
  pcp_scale(method="uniminmax") %>%       #   setting scaling method, see section 3.2
  pcp_arrange() %>%                       #   arranging categorical data
  ggplot(aes_pcp()) +                     # plotting the chart:
    geom_pcp_axes() +                     #   vertical lines for axes
    geom_pcp(aes(colour = species),       #   parallel coordinate line  segments
            alpha = 0.8, overplot="none") +
    geom_pcp_labels()                     #   labels for categorical variables
@

\includegraphics[keepaspectratio=T,width=\linewidth]{figures/api-fig-print-1.pdf}
\captionof{figure}{The code in \Cref{lst:ggpcp-api} describes the data handling and basic structure of this parallel coordinate plot with both categorical and continuous data shown on vertical axes. Some minor modifications have been made to the plot for aesthetic purposes.\label{fig:api-fig-print}}
\end{minipage}

One of the strengths of \pkg{ggplot2} is its handling of small multiple plots with \code{facet\_grid} and \code{facet\_wrap}; these functions are fully supported in \pkg{ggpcp}.
In addition, leveraging \pkg{ggpcp} on \pkg{ggplot2} expands the functionality available to users without much additional code, thanks to other packages such as
\pkg{plotly}~\citep{plotly-book}  which leverage \pkg{ggplot2} to create interactive graphics for the web and
\pkg{gridSVG}~\citep{gridsvg} which exposes vectorized graphics to allow programmable changes, such as elementary interactions with graphical elements.
<<api-fig-print, echo = F, include = F, fig.width = 8, fig.height = 3, dependson='api-listing-code'>>=
penguins %>%
  filter(!is.na(sex)) %>%
  pcp_select(4,3,5:6, sex, species) %>%
  pcp_scale(method="uniminmax") %>%
  pcp_arrange() %>%
  ggplot(aes_pcp()) +
    geom_pcp_axes() +
    geom_pcp(aes(colour = species), alpha = 0.8, overplot="none") +
    geom_pcp_labels() +
  scale_color_manual("Species", values = cols) +
  theme_bw() +
  scale_x_discrete(expand = expansion(add=0.3),
                   labels = c("Bill Depth (mm)", "Bill Length (mm)",
                              "Flipper Length (mm)", "Body Mass (g)",
                              "Sex", "Species")) +
  xlab("") +
  ylab("") +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.position="none")
@

In addition, \pkg{ggpcp} leverages  the full ggplot2 philosophy instead of using highly specific wrapper functions, allowing users to focus on the data, rather than the names of various parameters used for customization.
\pkg{ggpcp} adopts tidy conventions for data wrangling, separating the necessary data manipulation to generate a parallel coordinate plot from the visual rendering, as shown in \Cref{lst:ggpcp-api}.
Scaling, ordering of cases, and the arrangement of the parallel axes are completed using  \code{pcp\_select}, \code{pcp\_arrange}, and \code{pcp\_scale},respectively; the resulting data frame is then passed directly into the familiar \code{ggplot()} call.
During the plotting state, the only modification from default \pkg{ggplot2} syntax is the use of \code{aes\_pcp()} in place of \code{aes()}; this is necessary to handle the multiple axes in a parallel coordinate plot while maintaining the ability to map all other variables of the original data frame to aesthetics such as linetype and color.
The user has complete control over layers such as PCP lines (\code{geom\_pcp}), labels (\code{geom\_pcp\_labels}), and boxes around categorical variables (\code{geom\_pcp\_boxes}), but there are additional advantages to the use of \pkg{ggplot2}.
Users can also augment their parallel coordinate plots with additional information, such as boxplots or violin plots, with standard ggplot2 syntax.

An example parallel coordinate plot is shown in \Cref{fig:api-fig-print}, along with the \pkg{ggpcp} code to generate the plot in \Cref{lst:ggpcp-api}. We can see that Gentoo penguins have smaller bill depth and larger flipper length and body mass than Chinstrap and Adelie penguins. Chinstrap penguins have longer bills than Adelie penguins, but are similar to Adelie penguins across most other measurements. Males tend to be larger than females across all three species. In addition, it is clear from \Cref{lst:ggpcp-api} that the data management process (lines 2-5) is entirely distinct from the plotting process in lines 6-9. This separation makes plots generated with \pkg{ggpcp} easy to prepare, use, and customize.

%------------------------------------------------

\section{Data management}\label{sec:wrangling}
%------------------------------------------------

One of the ideas behind this re-implementation of parallel coordinate plots is to expose parallel coordinate plots at a functional level. Rather than using a single function with parameters controlling every aspect, we separate the data management from the visual rendering.
In particular, we separate out the data management into three parts:
\begin{enumerate}
\item Variable selection and reshaping data,
\item Scaling of axes, both at the individual level and in the relationship of the axes to each other, and
\item Treatment of ties in categorical axes.
\end{enumerate}
The code corresponding to each of these steps is shown in lines 3-5 of \Cref{lst:ggpcp-api}.

The modularization of the data wrangling process has the additional advantage of laying out the necessary elements in successive steps. Some of these steps are optional: scaling variables might not be necessary if all variables are already on the same scale (i.e. method `raw` in GGally); similarly, using pcp\_arrange to break ties is only necessary if  categorical variables are present and we want to spread these observations out so that individual lines are visible.
In addition, by exposing these elements of the pcp data wrangling process, we allow users to create additional functions for handling these tasks.

The treatment of ties is an aspect not generally addressed in the original parallel coordinate plots of \citet{Inselberg:1985} and \citet{Wegman:1990}. We have found a need to deal with ties, because ties are visually the main obstacle of allowing the viewer to follow an observation from axis to axis through the high-dimensional space.
If we can track a single observation through the high-dimensional space, we have the ability to look beyond the two-variable associations  of adjacent axes. This allows users to more easily summarize main trends and identify observations which do not follow those trends. When ties cannot be separated and users cannot follow individual observations, higher-dimensional insights are next to impossible.
% \hh{Once this assessment is broken for the individual observation, the  we cannot reasonably expect to gain much more information by plotting more data in the plot. XXX this is clumsy - what I am really aiming for needs a bit more: the way plots should be used in order to make sense of complicated situations is  to provide (1) a visual summary of the main trends and (2) allow us to identify observations that do not follow those trends. By mapping all plots that have the same value on one dimension into a single point on an axis, we hinder any higher-dimensional insights.}

\subsection{Variable Selection and Order of the Variables} \label{sec:variable-selection}

One of the biggest strengths of the Grammar of Graphics is its mapping between data variables and visual aesthetics.
In standard plots any mapping is a function between one data variable and one aesthetic.
In a parallel coordinate plot, this one-to-one mapping between data and plot aesthetics is seemingly turned into a one-to-many mapping between arbitrarily many data variables to the $x$ axis.
By transforming the wide form of the data set into a long form %\citep{reshape, dplyr} % HH: older references updated by
\citep{jss.tidy, hadley.tidy}, we obtain
a one-to-one mapping to a now discrete $x$ axis consisting of the (names of the) original data variables.

\begin{figure}
%\includegraphics[width=\linewidth]{sketches/data-wrangling.pdf}
\includegraphics[width=\linewidth]{sketches/data-wrangling-plus.pdf}
\caption{\label{sketch:wrangling}The user selects a set of three variables (top left). On the right, an overview of the data wrangling step  before a parallel coordinate plot can be drawn (bottom left). Note that the order in which variables are selected is reflected in the order in which variables are included in the parallel coordinate plot. }%\\au{Ordering in RH graphic should be the same as explanations below - start w/ pcp\_id, then pcp\_x, ...}}
\end{figure}

From the user's perspective, this data reshaping is data selection; the data wrangling takes place behind the scenes in \code{pcp\_select(data, ...)}, which selects the variables to be included in the parallel coordinate plot.
Variables can be specified by any combination of the following methods:

\begin{itemize}
\item position, e.g. \code{1:4, 7, 5, 4},
\item name, e.g. \code{class, age, sex, aede1:aede3} or
\item using pattern selectors, e.g. \code{starts\_with("aede")}, see \code{?tidyselect::select\_helpers}
\end{itemize}

Variables can be selected multiple times and will then be included in the data and the resulting plot multiple times.
Note that the order in which variables are selected determines the order in which the corresponding axis is drawn in the parallel coordinate plots.
\code{pcp\_select} transforms the selected variables to long form and embellishes the data set with a number of additional variables. All of the newly created and added variables start with the prefix \code{pcp\_}:
\begin{itemize}
\item \code{pcp\_id}: integer variable identifying each observation in the original dataset. This variable is used as the grouping variable to identify which values should be connected by a line segment in the parallel coordinate plot.
\item \code{pcp\_x}: discrete variable consisting of the names of the selected variables in the order that they were selected - this is the order in which the variables will be included in the plot.
\item \code{pcp\_y}: numeric variable containing the values of all of the selected variables. In case a selected variable is not numeric, it is converted to a factor variable and the (numeric) factor levels are saved in \code{pcp\_y}.
\item \code{pcp\_class}: character variable containing the class information of a selected variable.
\item \code{pcp\_level}: character variable containing the factor levels of selected data variables. In case of numeric variables, the data values are stored (in textual form). The ordering of factor variables will be discussed below but it is implemented using this added variable.
\end{itemize}

As a consequence of these design decisions, users have several ways of performing different tasks within the flow of generating data for a parallel coordinate plot. For instance, users can reorder variables using \code{pcp\_select} or after variable selection using the \code{pcp\_x} variable. Motivations for reordering factors in parallel coordinate plots are discussed in more detail in \Cref{sec:ties}.

Similarly to previous implementations of parallel coordinate plots which attempted to accommodate categorical variables, we treat factor variables as variables with labels and an associated (numerical) ordering of those labels.
Whenever we assign a numeric value to the ordering, we refer to the associated score, which is an integer value from one to the number of categories, if not specified explicitly otherwise.
Ordered factors are plotted from the lowest level upwards.  If a factor legend is included, it will need to be reversed to match this order by using \code{guides(color = guide\_legend(reverse=TRUE))}, as shown in the example in \Cref{sec:carcinoma}.
Where \pkg{ggpcp} differs from previous implementations of parallel coordinate plots is in the assignment of numerical values to individual observations within a factor level. This ordering is discussed further in \Cref{sec:ties}.

<<colorscheme>>=
#####  Color Palette by Paletton.com
#####  Palette URL: http://paletton.com/#uid=3140R0kllllaFw0g0qFqFg0w0aF


# *** Primary color:
primary = c("#AA8939", "#FFE7AA", "#D4B66A", "#806115", "#553D00")

# *** Secondary color (1):

secondary = c("#5A2971", "#9974AA", "#784A8E", "#3F1255", "#270339")

# *** Secondary color (2):

tertiary = c("#277552", "#75B095", "#499371", "#0F5837", "#003B20")

#####  Generated by Paletton.com (c) 2002-2014
@

<<scale, fig.cap="Two scaling methods showing fatty acid compositions of  olive oils from different regions in Italy, areas within each region are colored using similar hues within region (green for Northern Italy, purple for Sardinia, and tans for Southern Italy). The two scaling methods roughly allow the same conclusions.", fig.height = 8, fig.width = 8, fig.pos='htbp'>>=
#crabs <- read.csv("http://ggobi.org/book/data/australian-crabs.csv")
#prim7 <- read.csv("http://ggobi.org/book/data/prim7.csv")
data("olive", package="tourr")

oils <- olive %>% mutate(
  area = reorder(area, region)
)

dt1 <- oils %>%
  mutate(
    region=factor(region)
    ) %>%
  pcp_select(region, area, palmitic:eicosenoic) %>%
  pcp_scale(method = "uniminmax") %>%
  pcp_arrange(space = 0.2)
dt1$scaling <- "uniminmax"

dt2 <- oils %>%
  mutate(
    region=factor(region)
    ) %>%
  pcp_select(region, area, palmitic:eicosenoic) %>%
  pcp_scale(method = "robust") %>%
  pcp_arrange(space = 0.2)
dt2$scaling <- "robust"

dt <- rbind(dt1, dt2)


oils1 <- dt2 %>%
  ggplot(aes_pcp()) +
  geom_pcp_axes() +
  geom_pcp_boxes() +
  geom_pcp(aes(colour = area), alpha = 0.5, overplot="none") +
  facet_grid(scaling~., labeller="label_both", scales="free_y") +
  scale_colour_manual(values = c(primary[c(2,4,3,1)], secondary[1:2], tertiary[1:3])) +
  theme_bw() +
  theme(legend.position = "none") +
  guides(colour=guide_legend(override.aes = list(alpha=1, size = 2), reverse=TRUE)) +
  scale_x_discrete(expand = expansion(add=0.3)) +
  scale_y_continuous(
    labels=c("-4 MAD", "-2 MAD", "median", "+2 MAD", "+4 MAD"),
    breaks=seq(-.5, 1.5, by=0.5)) +
  xlab("") +
  ylab("") +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())

oils2 <- dt1 %>%
  ggplot(aes_pcp()) +
  geom_pcp_axes() +
  geom_pcp_boxes() +
  geom_pcp(aes(colour = area), alpha = 0.5, overplot="none") +
  facet_grid(scaling~., labeller="label_both", scales="free_y") +
  scale_colour_manual(values = c(primary[c(2,4,3,1)], secondary[1:2], tertiary[1:3])) +
  theme_bw() +
  theme(legend.position = "bottom") +
  guides(colour=guide_legend(override.aes = list(alpha=1, size = 2), reverse=TRUE)) +
  scale_x_discrete(expand = expansion(add=0.3)) +
  scale_y_continuous(labels=c("low", "", "medium", "", "high"),
                     breaks=c(0,0.25, .5,.75, 1)) +
  xlab("") +
  ylab("")

library(patchwork)
oils1/oils2
@

\subsection{Scaling}

\code{pcp\_scale(data, method)} scales the values on each axis and determines the relative relationship of the axes to each other. The \code{method} argument is a character string specifying the method to be used when transforming the values of each variable onto a common y axis. By default, the method \code{uniminmax} is chosen, which univariately scales each variable onto a range of [0,1] with the minimum at 0 and the maximum at 1. \code{globalminmax} maps the values across all axes onto a an interval of [0,1]. This method should only be used if the values across all variables are comparable.
The method \code{robust} normalizes values univariately by mapping the median value to 0.5 and a robust 95\% confidence interval (based on the median absolute deviation) to an interval of 0 to 1.
Values outside this range \autoref{fig:scale} indicate a variability in the measurements  larger than that of a normal distribution, as can be seen for several acid measurements. \hh{For convenience,   text labels instead of numeric values are shown along the $y$ axis in \autoref{fig:scale}. }


\Cref{fig:scale} shows  two of the scaling methods applied to the olive oil data  \citep{forina, tourr}: Measurements of fatty acids in 572 olive oils from three different regions in Italy are visualized as parallel coordinate plots. Similar to the findings by \citet{ggobi}, we see that eicosenoic acid is only found in increased quantities in olive oils from Southern Italy. Quantities of oleic and linoleic acids allow a separation between olive oils from Sardinia and Northern Italy. Both scaling methods enable us to find these conclusions. While uniminmax scaling uses the space allotted to the chart most efficiently, the robust normalization method emphasizes the heavy tails and skewness of some of the measurements, such as the percentages of stearic and arachidic fatty acids.

\section{Visual Rendering}\label{sec:visual}


\subsection{Breaking ties on categorical axes}\label{sec:ties}


One of the primary advantages of \pkg{ggpcp} over previous parallel coordinate plot software packages is that \pkg{ggpcp} handles categorical and continuous data in a way that allows users to trace a single observation through the projective space.
This is accomplished through a tie-breaking algorithm: different categorical levels are grouped along the vertical axis in boxes proportional to the number of cases in each level. Within the box for a level, individual observations are arranged so that visual clutter is minimized and individual cases can be followed.


\Cref{fig:alignment} shows several approaches of dealing with categorical variables in parallel coordinate plots.
The left-most panel shows two categorical variables and the typical net of lines that forms between them in an original parallel coordinate plot. The other three panels show three different approaches of breaking the ties resulting from the categorical variables, with our favored solution shown on the right: all observations are spaced out evenly. This results in a natural visualization of the marginal frequencies along each axis (additionally enhanced by the light gray boxes grouping observations in the same category). The ordering of the observations within the level is such that a minimal number of line crossings occurs between the axes. This method of dealing with categorical variables is the one we propose in the generalized parallel coordinate plot. While it is aesthetically pleasing, it also allows us, in the spirit of the original parallel coordinate plots,  to follow an individual observation from left to right through the plot even for  categorical variables.
The other two solutions in the middle panels of \Cref{fig:alignment} show
two intermediate solutions of breaking ties in categorical variables: jittering and equi-spaced (unordered) values.

<<alignment, fig.height = 3.5, fig.align="center", fig.cap="Using 12 randomly sampled penguins from the Palmer penguin data, we show four different approaches of dealing with categorical variables: the panel on the left shows the typical net of lines resulting from categorical variables in regular parallel coordinate plots. In the other three panels, ties in categorical levels are broken using different approaches (from left to right): jittering, equi-spaced line segments and ordered equi-spaced line segments are shown. ">>=
set.seed(20200924)
#x1 <- c(rep(1, 5), rep(2, 3), rep(3, 4))
#x2 <- c(1,2,1,2,1,1,1,1,2,2,2,1)

df <- penguins %>% na.omit() %>%  group_by(species, sex) %>%
  slice_sample(n = 3, replace = FALSE) %>%
  mutate(id = 1:n())

df <- df %>% filter(!(species=="Chinstrap" & sex=="male"),
                    !(species=="Adelie" & sex=="male" & id ==3) &
                    !(species=="Gentoo" & sex=="female" & id != 1))

x1 <- as.numeric(df$sex)
x2 <- as.numeric(df$species)
jitter1 <- runif(n = 12, min = -0.1, max = 0.1)
jitter2 <- runif(n = 12, min = -0.1, max = 0.1)
y <- as.factor(df$species)
dfnew <- tibble(#v1 = x2, v2 = x1,
  v1 = x1, v2 = x2,
  v3 = as.factor(x1),
  v4 = as.factor(x2),
  z = y,
  v5 = x2 + jitter1,
  v6 = x1 + jitter2,
  v7 = c(sample(5), 5+10+sample(3), 18+10+sample(4)))
dfnew <- dfnew %>% arrange(v1, v7)
dfnew$v8 <- c(sample(7), 20+sample(5))

dfnew2 <- dfnew %>%
  mutate(z = factor(z, levels = c( "Chinstrap", "Adelie","Gentoo"))) %>%
  mutate(v4 = factor(as.numeric(z)))

p1 <- dfnew %>%
  pcp_select(v1:v2) %>%
  pcp_scale() %>%
  ggplot(aes_pcp()) +
  geom_pcp_axes() +
  geom_pcp(aes(colour = z), size=1) +
  theme_bw() +
  scale_color_manual(values = c(oranges[2], purples[2], greens[2])) +
  xlab("") + ylab("") +
  facet_grid(.~"Original PCP") +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.position="none") +
  scale_x_discrete(expand = expansion(add=0.15), labels=c("Sex", "Species"))



p2 <- dfnew %>%
  mutate(v1 = v4, v2 = v3) %>%
  pcp_select(v2, v1) %>%
  pcp_scale() %>%
  pcp_arrange() %>%
  ggplot(aes_pcp()) +
  geom_pcp_boxes(boxwidth=0.3, fill="grey90", alpha=0.5) +
  geom_pcp_axes() +
  geom_pcp(aes(colour = z), size=1) +
  theme_bw() +
  scale_color_manual(values = c(oranges[2], purples[2], greens[2])) +
  xlab("") + ylab("") +
  facet_grid(.~"GPCP style") +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.position="none") +
  ylim(c(0,1))+
  scale_x_discrete(expand = expansion(add=0.2), labels=c("Sex", "Species"))



p3 <- dfnew %>%
  mutate(v1 = v6, v2 = v5) %>%
  pcp_select(v1:v2) %>%
  pcp_scale() %>%
  ggplot(aes_pcp()) +
  geom_pcp_axes() +
  geom_pcp(size=1, aes(colour = z)) +
  theme_bw() + ylab("") +
  scale_color_manual(values = c(oranges[2], purples[2], greens[2])) + xlab("") +
  facet_grid(.~"Jittering") +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.position="none") +
  scale_x_discrete(expand = expansion(add=0.15), labels=c("Sex", "Species"))

p4 <- dfnew %>%
  pcp_select(v8,v7) %>%
  pcp_scale() %>%
  pcp_arrange() %>%
  ggplot(aes_pcp()) +
  geom_pcp_axes() +
  geom_pcp(size=1, aes(colour = z)) +
  theme_bw() + ylab("") +
  scale_color_manual(values = c(oranges[2], purples[2], greens[2])) + xlab("") +
  facet_grid(.~"Equally spaced") +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.position="none") +
  scale_x_discrete(expand = expansion(add=0.15), labels=c("Sex", "Species"))

p5 <- dfnew2 %>%
  mutate(v1 = v4, v2 = v3) %>%
  pcp_select(v2, v1) %>%
  pcp_scale() %>%
  pcp_arrange() %>%
  ggplot(aes_pcp()) +
  geom_pcp_boxes(boxwidth=0.3, fill="grey90", alpha=0.5) +
  geom_pcp_axes() +
  geom_pcp(aes(colour = z), size=1) +
  theme_bw() +
  scale_color_manual(values = c(purples[2], oranges[2], greens[2])) +
  xlab("") + ylab("") +
  facet_grid(.~"GPCP style") +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), legend.position="none") +
  ylim(c(0,1))+
  scale_x_discrete(expand = expansion(add=0.2), labels=c("Sex", "Species"))

grid.arrange(p1, p3, p4, p2, nrow=1)
@

When extended over multiple axes, the equispaced tie-breaking solution that reduces line crossings requires hierarchical sorting, which is implemented in the \pkg{ggpcp} function \code{pcp\_arrange(data, method, space)}.
The two implemented methods are \code{"from-left"} and \code{"from-right"}, meaning that ties are broken using a hierarchical ordering determined by variables' values from the left or the right, respectively. The parameter \code{space} specifies the amount of the $y$ axis to use for space between levels of categorical variables. By default, 5\% of the axis is used for spacing.
While hierarchical sorting requires additional computations relative to the jittering or equally spaced solutions in \Cref{fig:alignment}, this extra processing serves as ``external cognition" \citep{scaifeExternalCognitionHow1996} - the additional computer time reduces the cognitive load required to untangle the data as displayed in the chart.

% \hh{XXX hierarchical ordering seems to minimize line crossings - but I don't have a proof. If we have a reference on ordering metrics this might go well here}% This is nerd sniping in the extreme... lol. %HH: sorry.
\citet{martiHeuristicsMetaheuristics2layer2003} discusses the NP hard problem of ordering categories to minimize line crossing. In PCPs, the category order is determined by the factor order (or the numerical scale in the continuous case); these line crossings are not avoidable through within-category sorting and are a function of the data itself. Hierarchical sorting of individual observations minimizes extraneous crossings within these categories in cases where there are multiple similar observations, contributing to the Gestalt of `common fate' among individuals with similar values across a number of PCP axes. % Sketch of the idea of how the proof would take form, even if I don't have the actual proof set up...
% HH: let's keep that for the next paper and compare it to manual orderings

\subsection{Variable Ordering and Transformations}

There are many different goals one might have when drawing a PCP; these goals shape any effort the designer might put into optimization of visual appearance. For instance, the order of factor levels is an important consideration if the goal is to minimize line crossings and thus the visual complexity of the parallel coordinate plot. As previously discussed, some line crossings can be removed by sorting, however, others can only be removed through reordering of factor levels.
While \textit{automatic} sorting of factor levels is computationally difficult and statistically undesirable given that many factors have some implicit or explicit ordering that should not be automatically optimized, reordering factors can reduce the number of line crossings to produce a simpler and more comprehensible PCP. For example, in the last panel of \Cref{fig:alignment}, a reordering of the second factor so that the dark (purple) lines are on the bottom could reduce the overall number of line crossings to just two crossings, once the hierarchical sorting is updated to accommodate the new factor order.

% I have a plot for this (p5, above) but don't really think it's essential to show it...

As briefly discussed in \Cref{sec:variable-selection}, users can transform individual variables, reordering factors or reversing an axis, using a mutate statement before variable selection.
% , as shown in \Cref{lst:reverse-axis}, which generates \Cref{fig:reordering-variables-axis1}.
Univariate transformations like these may be useful to reduce the overall visual complexity of a parallel coordinate plot by reducing the number of negatively correlated axes and crossing lines which are hard to follow. An example showing the benefits of reordering and transforming variables for visual clarity is provided in \Cref{fig:penguins-variable-order}.


\subsection{Line Segment Plotting Order}

One of the primary advantages of the generalized approach to dealing with categorical variables is the ability to follow a single observation throughout the plot. As the number of observations increases, this becomes less feasible because of overplotting of line segments, particularly for larger data sets. As more observations and line segments are drawn, more lines cross each other, increasing the effort required to follow a poly-line from one side of the plot to the other.
Coloring by groups and utilizing $\alpha$-blending improves the readability of plots.  However, the order of drawing the cases  affects what can be seen due to overplotting.

As a countermeasure, the order in which line segments are plotted should be carefully chosen. The parameter \code{overplot} defaults to option "small-on-top", where groups are plotted in order of size from largest to smallest so that the smallest group is plotted last -- \hh{effectively putting the small group on top}.

An alternative setting, "none", is very flexible, but requires the user to specify the order they want before plotting--or just accept the current order of the dataset. The use and effect of \code{overplot} are demonstrated in \Cref{lst:ggpcp-line-order} and \Cref{fig:order-fig-print}, respectively.

\begin{minipage}[b]{.94\linewidth}
<<order-listing-code, echo=TRUE, reset=TRUE, error=FALSE, warning=FALSE, fig.show ='hide'>>=
pcp_df <- penguins %>%
  arrange(sex) %>% # NA last = top of PCP axis
  pcp_select(sex, species) %>%
  pcp_scale(method="uniminmax") %>%
  pcp_arrange()
ggplot(pcp_df, aes_pcp()) + geom_pcp_axes() + # draw lines in the provided order
  geom_pcp(aes(colour = species), overplot = "none") +
  geom_pcp_labels() +
  theme_pcp()
ggplot(pcp_df, aes_pcp()) + geom_pcp_axes() + # draw the smallest category last
  geom_pcp(aes(colour = species), overplot = "small-on-top") +
  geom_pcp_labels() +
  theme_pcp()
@

\captionof{lstlisting}{The \code{overplot} parameter can be used to control the order in which lines are plotted, affecting the visual appearance and emphasis of parallel coordinate plots. The line 2 specifies the order of the dataset; lines 6-8 plot the data using the user-specified ordering while lines 9-11 plot the data using the default `small-on-top' ordering.\label{lst:ggpcp-line-order}}

\includegraphics[keepaspectratio=T,width=\linewidth]{figures/order-fig-print-1.pdf}
\captionof{figure}{The code in \Cref{lst:ggpcp-line-order} generates two parallel coordinate plots. The plot on the left uses the ordering of the dataset to determine line plotting order; as a result, lines with sex = NA are plotted last (on top). On the right, we use the  ``small-on-top" default; this ensures that the smallest category, Chinstrap, is plotted last.\label{fig:order-fig-print}}
\end{minipage}
<<order-fig-print, echo = F, include = F, fig.width = 8, fig.height = 3, dependson='order-listing-code'>>=

pp1 <- ggplot(pcp_df, aes_pcp()) + geom_pcp_axes() +
  # plot the dataset in the provided order
  geom_pcp(aes(colour = species), overplot = "none") +
  geom_pcp_labels() +
  scale_color_manual("Species", values = cols, guide = 'none') +
  ggtitle("Overplot = 'none'") +
  theme_pcp()

pp2 <- ggplot(pcp_df, aes_pcp()) + geom_pcp_axes() +
  # plot the smallest category (chinstrap) on top
  geom_pcp(aes(colour = species), overplot = "small-on-top") +
  geom_pcp_labels() +
  scale_color_manual("Species", values = cols, guide = 'none') +
  ggtitle("Overplot = 'small-on-top'") +
  theme_pcp()

library(patchwork)
pp1 + pp2 + plot_layout(nrow = 1, byrow = FALSE) + theme_pcp()
@

\section{Examples}\label{sec:examples}
\subsection{Palmers Penguins}

Several aspects in Parallel Coordinate Plots depend on orderings: the order of variables along the $x$ axis, the order of levels in a categorical variable, the orderings of cases within categorical variable levels, and the order in which lines are drawn.
Orderings should therefore (a) have good defaults, and (b) be easily changeable.


The top of \Cref{fig:ordering} shows a  generalized parallel coordinate plot of the Palmer penguins data \citep{penguins}.
The numeric data consists of body measurements of three species of penguins: bill length, bill depth, flipper length, body weight.
Adelie penguins generally have smaller bill lengths than the other two species, while Gentoo penguins can be distinguished by their relatively large flipper lengths.
The bottom of \Cref{fig:ordering} shows the effect of re-ordering the levels of both the `species` and the `island` variables in the generalized parallel coordinate plots. This re-ordering of factor levels has the effect of emphasizing that Gentoo penguins and Chinstrap penguins are each found on only one island, while Adelie penguins are found on all three islands.
In addition, only after levels of `island` and `species` are re-ordered
can we see
that for each species the numbers of penguins in the three years of the study (the study ID variable) were roughly the same.

<<ordering, fig.cap="Both of the levels of the island and the species variable re-ordered to reflect that two of the species are each only found on one island. ", fig.height=6, fig.width=8>>=
penguins1 <- penguins1 %>%
  rename(`study ID` = studyName, `Bill Length` = CulmenL,
             `Bill Depth` = CulmenD, `Flipper Length` = FlipperL,
             `Body Weight` = BodyMass)

# First pcp
pp1 <- penguins1 %>%
  filter(!is.na(Sex)) %>%
  pcp_select(`study ID`, species, Island, `Bill Length`:`Body Weight`) %>%
  pcp_scale() %>% pcp_arrange() %>% ggplot(aes_pcp()) +
  geom_pcp_axes(colour="white") +
  geom_pcp(aes(colour=species), alpha=0.6, overplot="none") +
  geom_pcp_boxes(fill="white", alpha = 0.5) +
  geom_pcp_labels() +
  theme_bw() +
  xlab(NULL) + ylab(NULL) +
  theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(),
        legend.position="none") +
  ggtitle("Original order of levels and variables") +
  scale_colour_manual(values=cols)

penguins1 <- penguins1 %>%   mutate(species=factor(species, levels=c("Chinstrap", "Adelie", "Gentoo"))) %>%
  mutate(island=factor(Island, levels=c("Dream", "Torgersen", "Biscoe")))


# Fourth pcp
pp2 <- penguins1 %>%
  filter(!is.na(Sex)) %>%
  pcp_select(`study ID`, species, island, `Bill Length`:`Body Weight`) %>%
  pcp_scale() %>% pcp_arrange(method="from-left") %>% ggplot(aes_pcp()) +
  geom_pcp_axes() +
  geom_pcp(aes(colour=species), alpha=0.6, overplot="none") +
  geom_pcp_boxes(fill="white", alpha = 0.5) +
  geom_pcp_labels() +
  theme_bw() +
  xlab(NULL) + ylab(NULL) +
  theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(),
        legend.position="none") +
  scale_colour_manual(values=c(cols[2], cols[1], cols[3])) +
  ggtitle("Levels reordered to emphasize relationship between islands and species")

library(patchwork)
pp1 + pp2 + plot_layout(nrow = 2, byrow = FALSE)
@



\paragraph{Distinguishing species}\hfill\newline
Factor level ordering is but one consideration when constructing parallel coordinate plots.
It is also important to carefully order the variables on the $x$-axis, as shown in \Cref{fig:penguins-variable-order}, where the variables have been re-ordered from \Cref{fig:ordering}
to allow the viewer to identify which body measurements distinguish the species. In addition to the re-ordering, the axis for bill depth has been reversed. Both changes help to separate the species. Gentoo penguins have the lowest bill depth, while generally having the longest flippers and largest mass. Reversing the axis for bill depths aligns the smallest bill depths with the longest flippers, moving Gentoo penguins closer together as a group.
The plot shows that the Gentoo penguins are bigger, that Gentoo and Chinstrap are both only found on single islands, and, finally, that Adelie and Chinstrap are distinguished by the lengths of their bills.

As \pkg{ggpcp} uses the ggplot2 API, faceting is fully supported. \Cref{fig:penguins-variable-order} is faceted by gender:
while the results are the same for the two sexes, any variability of body measures due to sex is removed from the plot by facetting. This makes the results stand out more.
Interestingly, some potential outliers that were not visible previously now become visible. Note for example the two Gentoo males with particularly short flippers, and the Chinstrap female with an exceptionally long bill.


<<penguins-variable-order, fig.cap="Changing the order of the variables along the x-axis emphasizes the differences in body measurements between the species.", fig.height=6, fig.width=8>>=
# Reorder the variables, moving CulmenL to the right, and do case ordering from the left
# Invert the CulmenD variable (and use the minus notation :-))
penguins1 <- penguins1 %>% mutate(`-Bill Depth`=-`Bill Depth`)


# Change the order of printing the colours to make Chinstrap stand out better
# Requires rearranging of dataset case order and using overplot="none"
penguins1 <- penguins1 %>% arrange(fct_rev(species))

# # Sixth pcp
# p1 %>% pcp_select(studyName, speciesC, islandC, `-CulmenD`, FlipperL, BodyMass, CulmenL, Sex) %>%
#   pcp_scale() %>% pcp_arrange(method="from-left") %>% ggplot(aes_pcp()) +
#   geom_pcp_axes(colour="white") +
#   geom_pcp(aes(colour=speciesC), overplot="none") +
#   geom_pcp_boxes(fill="white") +
#   geom_pcp_labels(fill="white", alpha=1) +
#   xlab(NULL) + ylab(NULL) +
#   theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(),
#         legend.position="none") +
#   scale_colour_manual(values=c(cols[2], cols[1], cols[3]))
#



# # Splitting by sex (not faceting so that NAs are excluded and scales are individual)
# # Seventh pcp
# m1 <- penguins1 %>% filter(Sex=="MALE") %>% pcp_select(`study ID`, species, island, `-Bill Depth`, `Flipper Length`, `Body Weight`, `Bill Length`, Sex) %>%
# pcp_scale() %>% pcp_arrange(method="from-left") %>% ggplot(aes_pcp()) +
# geom_pcp_axes() +
# geom_pcp(aes(colour=interaction(sex,species)), overplot="none", alpha = 0.8) +
# geom_pcp_boxes(fill="white", alpha = 0.8) +
# geom_pcp_labels(fill="white", alpha=1) +
#   theme_bw() +
# xlab(NULL) + ylab(NULL) +
# theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(),
# legend.position="none") +
# scale_colour_manual(values=c(oranges[c(1,3)], greens[c(1,3)], purples[c(1,3)]))
#
# f1 <- penguins1 %>% filter(Sex=="FEMALE") %>% pcp_select(`study ID`, species, island, `-Bill Depth`, `Flipper Length`, `Body Weight`, `Bill Length`, Sex) %>%
# pcp_scale() %>% pcp_arrange(method="from-left") %>% ggplot(aes_pcp()) +
# geom_pcp_axes() +
# geom_pcp(aes(colour=species), overplot="none", alpha = 0.8) +
# geom_pcp_boxes(fill="white", alpha =0.8) +
# geom_pcp_labels(fill="white", alpha=1) +
#   theme_bw() +
# xlab(NULL) + ylab(NULL) +
# theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(),
# legend.position="none") +
# scale_colour_manual(values=c(cols[2], cols[1], cols[3]))
#
# #library(patchwork)
# #f1 + m1 + plot_layout(nrow = 2, byrow = FALSE)

penguins1 %>%
  filter(!is.na(Sex)) %>%
  pcp_select(`study ID`, species, island, `-Bill Depth`, `Flipper Length`, `Body Weight`, `Bill Length`) %>%
#  pcp_select(studyName, species, island, `-CulmenD`, FlipperL, BodyMass, CulmenL) %>%
  group_by(Sex) %>%
  pcp_scale(.by_group = TRUE) %>%
  pcp_arrange(method="from-left", .by_group = TRUE) %>%
  ggplot(aes_pcp()) +
  geom_pcp_axes() +
  geom_pcp(aes(colour=interaction(Sex,species)), overplot="none", alpha = 0.8) +
  geom_pcp_boxes(fill="white", alpha =0.6) +
  geom_pcp_labels(fill="white", alpha=0.6) +
  theme_bw() +
  xlab(NULL) + ylab(NULL) +
  theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(),
        legend.position="none") +
  scale_colour_manual(values=c(greens[c(1,3)], oranges[c(1,3)], purples[c(1,3)])) +
  facet_grid(Sex~.)
@

\paragraph{Determining sex}\hfill\newline

\Cref{fig:penguins} shows that within each species, the males tend to be larger in size and heavier than the females. For several of the penguins, sex could not be determined because either the sexing primer did not amplify or no blood sample was obtained \citep{penguins2}. These penguins are represented by dark lines. Comparing these penguins' body measurements to those of the other penguins, we can make suggestions regarding their sex.

<<penguins, fig.cap="Generalized Parallel Coordinate Plot of the Palmer penguins data with sex of penguin mapped to color. Dark lines represent penguins for which sex could not be determined.  We see that researchers were able to sex all of the Chinstrap penguins. Note that species is included twice (with different order of the levels). ", fig.height=4, fig.width=8>>=
 penguins <- penguins %>%
   mutate(
     species = factor(species, c("Chinstrap", "Adelie", "Gentoo")),
     species2 = factor(species, c( "Adelie", "Gentoo","Chinstrap")),
     `-bill_length_mm`=-bill_length_mm,
     `-bill_depth_mm`=-bill_depth_mm
   )

penguins_pcp <- penguins %>%
    mutate(
        sex = ifelse(is.na(sex),"?", as.character(sex)),
        sex = factor(sex, levels = c("female", "?", "male"))
    ) %>%
  filter(!is.na(body_mass_g)) %>%
  pcp_select(species2,`bill_length_mm`,
             flipper_length_mm, body_mass_g, `-bill_depth_mm`, species,  sex) %>%
  pcp_scale() %>%
  pcp_arrange()

penguins_pcp %>%
  ggplot(aes_pcp()) +
  geom_pcp_axes() +
  geom_pcp_boxes(boxwidth=0.1) +
  geom_pcp(aes(colour = sex), alpha = 0.8) +
  geom_pcp(aes(colour = sex), size =1,
           data = penguins_pcp %>% filter(sex=="?")) +
  geom_pcp_labels(aes(label = pcp_level), alpha = .75) +
  scale_colour_manual("Sex", values=c("#FFCD70", "#8b4950", "#008080")) +
#    scale_colour_manual(values=c("#ff595e", "#573e79", "#1982c4")) +
  theme_pcp() +
  theme(legend.position="none") +
  scale_x_discrete(
    labels=c("Species", "Bill Length (mm)", "Flipper Length (mm)",
             "Body Mass (g)", "- Bill Depth(mm)", "Species",
             "Sex"))
#  facet_wrap(~sex)
@

In \Cref{fig:penguins2b} we explore this idea a bit further. This figure is based on the same data as \Cref{fig:penguins}, however, we exclude Chinstrap penguins as researchers were able to sex all of those penguins. The body measurements of all sexed penguins are summarised by two ribbons for each sex and species. The inner ribbons are bounded by the 25\% and the 75\% percentile values on each axis.  The lighter ribbon covers 95\% of observations on each variable. We use these ribbons to reduce the noise introduced by individual lines.
Body measurements of the unsexed animals are represented as line segments on top of the ribbons.
This helps us to evaluate and assess the lines drawn for individual, unsexed penguins within the context of the marginal distributions (in this case their putative sex and species).

While we facet both by species and sex, note that the axes are re-scaled within each species to make use of the full range in $y$. However, we use the same scale between the two sexes of each species. This different treatment of faceting variables is achieved by the use of a \code{group\_by} statement before \code{pcp\_scale}. \Cref{lst:pcp_relabel_group} shows the code for prepping the data shown in \Cref{fig:penguins2b}. By grouping on species but not on sex (line 9), data is being rescaled within species but the same scaling is used across males and females. Measurements for unsexed animals are shown as line segments on top of inter-quantile ribbons of both sexes. Viewers are encouraged to draw a conclusion about an animal's sex based on their values within the (2d density) context of their species and putative sex. Statistically, this comparison relates to a likelihood ratio test: the viewer is asked to make an assessment of the likelihood to observe the measurements of an animal under each of the two competing hypotheses of sex.

\begin{minipage}[b]{.95\linewidth}
\captionof{lstlisting}{Code to prepare data for \Cref{fig:penguins} by relabling penguins with NA sex as `?' and ordering sex so that penguins of unknown sex are between the male and female labels.\label{lst:pcp_relabel_group}}
<<penguins2a, echo=TRUE, reset=TRUE>>=
penguins_pcp <- penguins %>%
  filter(species != "Chinstrap") %>%                  # no unsexed animals in Chinstrap
  mutate(
    sex = ifelse(is.na(sex),"?", as.character(sex)),  # make assignment more readable
    sex = factor(sex, levels = c("female", "?", "male"))
  ) %>%
  filter(!is.na(body_mass_g)) %>%
  pcp_select(6:5, 3:4) %>%
  group_by(species) %>%                               # re-scale by species
  pcp_scale() %>%
  pcp_arrange()
@
\end{minipage}

Chinstrap penguins are excluded (line 2) because all of their individuals in the data have a sex assigned.
The general pattern of measurements of the Gentoo penguins suggests that three of the four individuals with missing sex information are female (the three with the lowest bill depth). The fourth animal has an exceptionally deep bill, however, all other measurements suggest that this animal, too, is female. For further evidence, we find from the original data  that their nest partners are all sexed as male; this additional information is shown in \Cref{fig:penguins2b}. While assuming that nest partners are male and female is not a perfect method, in particular, for penguins, which have been shown to live in same-sex partnerships, in  all three of the studies considered for this data only nests with breeding successes have been considered. More details can be found in \citet{penguins2}.
For Adelie penguins determining sex is not quite as clear-cut, but based on body mass and bill length measurements the three lightest penguins might be female, while the heaviest one could be male. The fifth penguin, marked `?', exhibits measurements that are neither typically male not typically female. We can assess these inferences using the additional information that four of the five unsexed Adelie penguins are nest partners. The un-partnered penguin is the lightest and has measurements which are more consistent with female penguins. The Adelie penguin indicated by ? is the partner of a female penguin (pair B) and might be assumed to be male. The remaining pair of unsexed Adelie penguins (pair A) consists of a putative male and female; this is consistent with the breeding pair assumption in the study.


<<penguins2b, dependson="penguins2a", fig.cap="Closer investigation of non-sexed Adelie and Gentoo penguins. The group\\_by call before pcp\\_scale is responsible for scaling by species while the same scale is kept across sex within species. Penguins without assigned sex (based on blood markers) are drawn on top of both sexes. The labels to the left of the ribbons are our best guess at a penguin's sex based on body measurements of other penguins of the same species. The letters on the right indicate nests -- two penguins with the same letter share the same nest. ", fig.height = 6, fig.width = 8>>=

# making ribbons
# probs <- seq(0,1,by=0.1)
probs <- c(0.025, 0.25, 0.75, 0.975)

dframe <-
  penguins_pcp %>% filter(sex!="?") %>% group_by(species, sex, pcp_x) %>%
  summarise(value = quantile(pcp_y, prob=probs),
            quantile=probs,
            lower = probs<0.5,
            level = round(10*abs(quantile-0.5), digits = 1))  %>%
  select(-quantile) %>%
  mutate(lower = factor(lower, labels=c("upper", "lower"))) %>%
  pivot_wider(names_from="lower", values_from="value") %>%
  ungroup() %>%
  mutate(
    level = ifelse(level > 2.5, "Inner 95%", "Inner 50%"),
    level = factor(level, levels=c("Inner 50%", "Inner 95%"))
  ) # %>% filter(level <= 4)

# for annotations
annotate_dframe <- penguins_pcp %>%
  filter(sex=="?", !is.na(body_mass_g), pcp_x == "body_mass_g")

library(emojifont)
load.fontawesome()
labels <- fontawesome(c('fa-venus','fa-mars', "fa-question"))

annotate_dframe$putative <- labels[1]
annotate_dframe <- annotate_dframe %>% mutate(
  putative = ifelse(pcp_y > 0.4, labels[3], putative),
  putative = ifelse(pcp_y > 0.5, labels[2], putative)
)

#circle <- fontawesome(c('fa-h-square', 'fa-plus-square'))

circle <- c("","")

#e0fd # unicode for b
# recalculate position by group
# XXXX pcp_arrange has to also do the tie-breaking by group.
penguins_pcp %>%
  filter(sex!= "?") %>%
  ggplot(aes_pcp()) +
  geom_pcp_axes() +
  geom_pcp_boxes(boxwidth=0.1) +
#  geom_pcp(aes(colour = sex), alpha = 0.4) +
  geom_ribbon(aes( ymin = lower, ymax=upper, group=interaction(sex,level), fill = sex, alpha=level),
              #alpha = 0.25,
              data = dframe) +
  geom_pcp(aes(colour = sex, fill = "?"), colour = "#8b4950dd", size = 0.9,
           data = penguins_pcp %>% filter(sex=="?") %>% mutate(sex = "female")) +
  geom_pcp(aes(colour = sex, fill = "?"), colour = "#8b4950dd", size = 0.9,
           data = penguins_pcp %>% filter(sex=="?") %>% mutate(sex = "male")) +
  geom_pcp_labels(aes(label = pcp_level), alpha = .5) +
  theme_bw() +
  scale_fill_manual(values=c( "#8b4950", "#FAA404", "#008080")) + # lighter yellow "#FFCD70"
  theme(legend.position="bottom") +
    facet_grid(species~sex) +
  scale_x_discrete(expand = expansion(add=0.25)) +
  xlab("") + ylab("") +
  scale_alpha_manual("Inter-quantile Range", values = c(0.25, 0.25)) +
  guides(
    fill = guide_legend(override.aes = list(alpha = 0.5)),
    alpha = guide_legend(override.aes = list(alpha =  c(0.5, 0.25)))
  ) +
  geom_text(aes(colour = sex, label=putative), colour = "#8b4950",
           data = annotate_dframe %>% mutate(sex = "male"), nudge_x = -0.125,
           family='fontawesome-webfont', size=5) +
  geom_text(aes(colour = sex, label=putative), colour = "#8b4950",
           data = annotate_dframe %>% mutate(sex = "female"), nudge_x = -0.125,
           family='fontawesome-webfont', size=5) +
  geom_text(aes(label=marker),
            data = data.frame(
                 species="Adelie",
                 marker = c("A", "A", "B", "B"),
                              pcp_y = c(0.783, 0.433, 0.3, 0.267),
                              pcp_x = "bill_depth_mm",
                 nest = c("N5", "N5", "N6", "N6")),
            colour = "#8b4950",
           nudge_x = 0.1, size = 3) +
  theme_pcp() +
  scale_x_discrete(expand = expansion(add=0.2),
                   labels = c("Body Mass (g)", "Flipper Length (mm)",
                   "Bill Length (mm)", "Bill Depth (mm)"))
@


\subsection{Getting a second, third, ... and seventh opinion}\label{sec:carcinoma}

\Cref{fig:carcinoma} shows data from \citet{agresti} published as part of the \code{poLCA} package \citep{polca}. Seven pathologists were asked to assess the same 118 slides for the presence or absence of carcinoma in the uterine cervix. Binary responses for each slide were recorded (yes/no).  Pathologists all agreed on about 25\% of slides, which they  considered to be carcinoma free, and a further 12.5\% of slides, which were considered to show carcinoma by all pathologists.
For the remaining 62.5\% of slides there was some disagreement and it is clear that this disagreement is not random. The pathologists have been ordered from left to right from the fewest number of overall carcinoma diagnoses made to the highest number.  This shows a strong level of agreement between adjacent axes.
Note, in this example we do not need to scale the variables. Aside from the actual scale the values are ordered in the same way.
<<carcinoma, fig.cap="Pathologists' diagnoses of absence (no) or presence (yes) of carcinoma in the uterine cervix based on 118 slides. Each slide is shown by a poly-line.", fig.height = 4, fig.width = 8>>=
data("carcinoma", package = "poLCA")
carcinoma$numdiag <- rowSums(carcinoma) - 7
carcinoma$any <- carcinoma$numdiag > 0

carcinoma[,1:7] <- carcinoma[,1:7] %>%
  purrr::map(.f = function(x) factor(x, labels =c("no", "yes"))) %>%
  data.frame()

carcinoma %>%
  pcp_select(6,4,3,1,7,5,2) %>%
  pcp_scale(method="raw") %>%
  pcp_arrange() %>%
  ggplot(aes_pcp()) +
    geom_pcp_axes() +
    geom_pcp_boxes() +
    geom_pcp(aes(colour = factor(numdiag))) +
    geom_pcp_labels(aes(label = pcp_level), alpha = .5) +
    scale_colour_brewer("Number of\ncarcinoma\ndiagnoses", palette ="Dark2") +
    theme_bw() +
    guides(color = guide_legend(reverse=TRUE, override.aes = list(size = 3))) +
  scale_x_discrete(expand = expansion(add=0.25)) +
  xlab("Pathologist") + ylab(NULL) +
  theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
@


\citet[Table 1]{carcinoma}  allow us a closer look at this data.
The pathologists evaluated the slides using five levels from 1 to 5, given as:
(1) Negative, (2) Atypical Squamous Hyperplasia, (3) Carcinoma in Situ, (4) Squamous Carcinoma with Early Stromal Invasion, and (5) Invasive Carcinoma.
\citet{agresti} classified levels 1 and 2 as "no" and levels 3 to 5 as "yes".
\Cref{fig:carcinoma2} gives an overview of this more detailed data. The different pathologists are drawn in the same order as in \Cref{fig:carcinoma}. The results for each scan are colored by the overall average score (rounded to the closest integer). Compared to the previous figure, \Cref{fig:carcinoma2} shows more variability between pathologists' evaluations, but only few scans have vastly different scores assigned to them. Pathologist C, in particular, rates two scans as negative, that all other pathologists rate as quite advanced cancer. Mostly, the variability between pathologists' assessments stems from a difference in applying the categories rather than from an actual difference of opinions.
The similarity in evaluations is particularly striking between pathologists A, G, E, and B.

In this example, the generalized parallel coordinate plot gives us a visual tool for assessing the similarity between evaluations by different pathologists that moves beyond a mere correspondence of scores to an analysis that is based on ranks.
The hierarchical sorting used in \code{pcp\_arrange} assigns ranks to each observation. This provides additional information about the agreement between pathologists, which is graphically represented as the variability in line slope (that is, whether the $y$ coordinate on each vertical axis is similar).
When the poly-lines are relatively flat, this means that  pathologists agree on the relative severity of the carcinoma in the scan.
Obviously, we can assess `flat-ness' of the poly-lines numerically as the variance of the calculated variable \code{pcp\_y}.
\Cref{fig:carcinoma3} highlights the controversial scans, and provides additional visualizations assessing the frequency of difficult scans and the variability in \code{pcp\_y} and in the numerical scores assigned.

<<carcinoma2, fig.cap="Closer look at pathologists' evaluations on a more detailed scale from 1 (Negative) to 5 (Invasive Carcinoma). Rounded average scores are mapped to color to help distinguish severity of scan evaluations.", fig.height = 4.25, fig.width = 7, out.width='0.9\\textwidth', fig.align='center'>>=
data(Carcinoma, package="ggpcp")
Carcinoma_pcp <- Carcinoma %>% mutate(
  `round(Average)` = factor(round(Average))
  ) %>% arrange(`round(Average)`) %>%
  pcp_select(F, D, C, A, G, E, B, `round(Average)`) %>%
  pcp_scale(method="uniminmax") %>%
  pcp_arrange()

var_id <- Carcinoma_pcp %>%
  filter(pcp_x != 'round(Average)') %>%
  group_by(pcp_id) %>%
  summarize(
    var_y = var(pcp_y),
    var_scores = var(parse_number(pcp_level))
  )

var_id <- var_id %>% left_join(
  Carcinoma_pcp %>% ungroup() %>%
    select(pcp_id, `round(Average)`)  %>% unique(), by = "pcp_id")

# https://coolors.co/0680c6-a4c7e0-fedfc3-f47966-ff0a3b
# https://coolors.co/045a8d-74a9cf-fdbe85-f03b20-bd0026
# scatterplot of variances against each other
ggvars <- var_id %>%
  ggplot(aes(x = var_y, y = var_scores)) +
#  geom_hex(bins = 20, fill ="grey50", alpha = 0.25) +
  geom_point(aes(colour = `round(Average)`, alpha = var_y)) +
  geom_point(colour="grey90",
             data = var_id %>% filter(var_y < 0.001)) + # fudging a bit to grey out points with high frequencies
  xlab("Var(pcp_y)") + ylab("Var(scores)") +
  scale_color_manual(values=c("#045a8d", "#74a9cf",  "#fdbe85", "#f03b20", "#bd0026")) +
  theme(legend.position = "none") +
  geom_point(aes(colour = `round(Average)`),
             data = var_id %>% filter(var_y > 0.02))
#  scale_x_sqrt() +
#  scale_y_sqrt()

Carcinoma_pcp %>%
  ggplot(aes_pcp()) +
    geom_pcp_axes() +
    geom_pcp_boxes() +
    geom_pcp(aes(colour = `round(Average)`), overplot = "none") +
    geom_pcp(aes(colour = `round(Average)`),
             data = Carcinoma_pcp %>% filter(pcp_id %in% rev(c(115, 50, 53, 99, 96, 104, 97, 102, 114)))) +
    geom_pcp_labels() +
    theme_bw() +
    scale_x_discrete(expand = expansion(add=c(0.2, 0.4))) +
    xlab("Pathologist") + ylab("Carcinoma score") +
    theme(axis.text.y=element_blank(),
          axis.ticks.y=element_blank()) +
    theme(legend.position="none") +
  scale_colour_manual("Average carcinoma score",values=c( "#045a8d", "#74a9cf",  "#fdbe85", "#f03b20",
"#bd0026")) + theme(legend.position = "bottom") +
  guides(color = guide_legend(override.aes = list(size = 2)))
@

<<carcinoma3, dependson='carcinoma2', fig.cap="Highlighting lines with high variability", fig.height = 6, fig.width = 8>>=
Carcinoma_pcp2 <- Carcinoma_pcp %>%
  left_join(var_id %>% select(pcp_id, var_scores, var_y), by = "pcp_id")

hist <-
  var_id %>%
  mutate(
    var_low = var_y < 0.02,
    var_disc = ifelse(var_low, "Low", "High"),
    var_disc = factor(var_disc, levels = c("Low", "High"))) %>%
  ggplot(aes(x = var_y, fill = `round(Average)`,
             alpha = var_disc)) +
  geom_histogram(binwidth = 0.01, colour="grey50", size=0.1) +
  scale_fill_manual("Average carcinoma score",values=c( "#045a8d", "#74a9cf",  "#fdbe85", "#f03b20",
"#bd0026")) +
  xlab("Var(pcp_y)") +
  ylab("Number of scans") +
  scale_alpha_manual("Var(pcp_y)",
                     values = c(0.25, 1)) +
  theme(legend.position = "right",
        legend.direction = "horizontal") +
  guides(fill =
           guide_legend(title.position="top",
                           title.hjust = 0),
         alpha = guide_legend(title.position="top", title.hjust = 0))


gpcp <- Carcinoma_pcp2 %>%
  ggplot(aes_pcp()) +
    geom_pcp_axes() +
    geom_pcp_boxes() +
    geom_pcp(aes(colour = `round(Average)`),
             overplot = "none",
             alpha = 0.15) +
    geom_pcp(aes(colour = `round(Average)`),
             data = Carcinoma_pcp2 %>% filter(var_y > 0.02)) +
    geom_pcp_labels() +
    theme_bw() +
    scale_x_discrete(expand = expansion(add=c(0.2, 0.4))) +
    xlab("Pathologist") + ylab("Carcinoma score") +
    theme(axis.text.y=element_blank(),
          axis.ticks.y=element_blank()) +
    theme(legend.position="none") +
  scale_colour_manual(
    "Average carcinoma score",
    values=c( "#045a8d", "#74a9cf",  "#fdbe85", "#f03b20",
"#bd0026")) + #theme(legend.position = "bottom") +
  guides(color = guide_legend(override.aes = list(size = 2)))

layout <- "
AAAAAAAAA
BBBBBCCCC
"
gpcp + hist +  ggvars +
  plot_layout(design = layout, heights = c(1.5,1))


@

%------------------------------------------------

\subsection{Clustering with PCPs}

PCPs can also be used to assess, explain, and explore statistical methods. In the penguins example, we can use $k$-means clustering on all numeric body measurements and investigate which observations are generally captured in each of the clusters, as well as which categorical variables are most associated with membership in each cluster.

$k$-means clustering assigns cluster labels arbitrarily based on random cluster centers.
In order to maintain a persistent ordering over different values of $k$ we reorder the cluster labels by the value of \code{body\_mass\_g}. This helps us to compare between $k$ and $k+1$ clusters.
%
\Cref{fig:kmean-penguins} shows the numeric measurements along with the assigned clusters, with categorical variables species and sex on the right. Each line is colored by the assigned cluster, allowing us to determine how the categorical variables relate to the quantitative variables and the resulting clusters.
%
When $k=2$, \Cref{fig:penguink2} shows that the largest difference in the observed data is between Gentoo penguins and the other two species. When $k=3$, in \Cref{fig:penguink3}, the additional cluster separates the Adelie and Chinstrap penguins into two groups with a few misclassifications; this additional cluster is based on the length of the bill (which we can follow due to the clear connection between data values in the generalized PCP). Adding a fourth cluster, as in \Cref{fig:penguink4} splits Adelie penguins into males and females,
though again there are some penguins that are misclassified. The addition of a fifth cluster in \Cref{fig:penguink5} splits Chinstrap penguins into male and female. Once we add a sixth cluster in \Cref{fig:penguink6}, we finally split the Gentoo penguins by sex as well, though again this clustering is not perfect.

What is clear from this exercise is that Adelie and Chinstrap penguins are much more similar to each other than they are to Gentoo penguins, but that there is still noticeable sexual dimorphism within each species.

We also see from the figure that some of the separation into sexes is lost from one clustering to the next. This is typical for non-hierarchical clustering algorithms. Rather than refining a previous cluster, a switch from $k$ clusters to $k+1$ clusters starts the clustering process anew. If the signal in the data to separate into $k$ clusters is not strong or is ambiguous, we will see this reflected in the results; observations might be quite arbitrarily put together into groups, or a group of observations might be split into multiple clusters.
%
In the Hartigan-Wong \citep{hartigan1979} algorithm used here for the clustering, points are assigned to random clusters in the initialization. In order to assess the effect of this non-deterministic start on the results, it is good practice to investigate the cluster stability by repeating the clustering multiple times for the same number of classes $k$ (if $k > 1$). \Cref{fig:cl-overview-2} shows a comparison of the results from multiple runs of the $k$-means algorithm for $k = 6$. The lines in this figure are colored by species and sex. We see that the splits by species are relatively stable -- there are only a few cases across all results in which individuals end up in clusters with individuals from another species, and if they do, it is the same individuals across different results. Splits by sex show more variability: Chinstrap penguins rarely split into male/female clusters, while Gentoo penguins shows a relatively stable separation into males and females. The Adelie population has subsets of individuals that are separated into males only, females only, and a third, more variable subset of a combination of the two.

<<cluster-setup>>=
penguins_complete <- penguins %>% na.omit()

# run kmeans for k from 2 to 8, sort clusters by body weight,
# then label clusters from lightest to heaviest
set.seed(20220901)
# set.seed(20220902)
clusters <- tibble(k = 2:8)
clusters <- clusters %>% mutate(
  kmeans_cl = k %>% purrr::map(.f = function(cl) {
    kmeans(penguins_complete %>%
             dplyr::select(bill_length_mm:body_mass_g) %>%
             mutate(
               across(.fns = scale)
             ), centers=cl)
  })
)

penguins_complete$cl2 <- clusters$kmeans_cl[[1]]$cluster
penguins_complete$cl3 <- clusters$kmeans_cl[[2]]$cluster
penguins_complete$cl4 <- clusters$kmeans_cl[[3]]$cluster
penguins_complete$cl5 <- clusters$kmeans_cl[[4]]$cluster
penguins_complete$cl6 <- clusters$kmeans_cl[[5]]$cluster
penguins_complete$cl7 <- clusters$kmeans_cl[[6]]$cluster
penguins_complete$cl8 <- clusters$kmeans_cl[[7]]$cluster

penguins_complete <- penguins_complete %>% mutate(
  across(starts_with("cl"), as.factor),
  across(starts_with("cl"), .fns = function(cl) {
    cl <- reorder(cl, body_mass_g, mean)
    levels(cl) <- 1:length(levels(cl))
    cl
  })
)

# penguins_complete <- penguins_complete %>% mutate(
#   species = factor(species, levels = c("Gentoo", "Adelie", "Chinstrap"))
# )
@

<<cl2, fig.cap="Parallel coordinate plot of penguins' body measurements (left), a separation into two clusters, and penguins' species (right). There is a strong pattern between bill depth and flipper length that separates Gentoo penguins from the perfectly from the other two species.", fig.height = 4, fig.width = 8, include = F>>=
penguins_complete %>%
  mutate(
    cl2 = reorder(cl2, body_mass_g, mean)
  ) %>%
  pcp_select(bill_length_mm:body_mass_g, cl2, species) %>%
  pcp_scale() %>%
  pcp_arrange() %>%
  ggplot(aes_pcp()) +
  geom_pcp(aes(color=cl2), alpha = 0.6) +
  geom_pcp_boxes(fill=NA) +
  geom_pcp_labels() +
  theme_bw() +
#  scale_color_brewer(type="qual") +
  scale_color_manual(values = c(oranges[2], purples[2])) +
  theme(legend.position = "none") +
  ylab("") +
  theme(axis.title.y = NULL, axis.text.y = NULL, axis.ticks.y = NULL) +
  scale_y_continuous(labels=c("low", "", "medium", "", "high"),
                     breaks=c(0,0.25, .5,.75, 1)) +
  scale_x_discrete("",expand = expansion(add=0.25),
                   labels=c("Bill length", "Bill depth",
                            "Flipper length", "Body mass",
                            "k=2 Clusters", "Species")) +
  ggtitle("Clustering into 2 groups")

@

<<cl3, fig.cap="The third cluster splits the former second cluster into two based on the length of the bill. The three species are almost perfectly separated in using three clusters.", fig.height = 4, fig.width = 8, include = F>>=
penguins_complete_pcp <- penguins_complete %>%
  mutate(
    cl3 = reorder(cl3, body_mass_g, mean)
  ) %>%
  pcp_select(bill_length_mm:body_mass_g, cl3, species) %>%
  pcp_scale() %>%
  pcp_arrange()

penguins_complete_pcp %>%
  ggplot(aes_pcp()) +
  geom_pcp(aes(color=cl3), alpha = 0.6,
           data = filter(penguins_complete_pcp, cl3!="2")) +
  geom_pcp(aes(color=cl3), alpha = 0.6,
           data = filter(penguins_complete_pcp, cl3=="2")) +
  geom_pcp_boxes(fill=NA) +
  geom_pcp_labels() +
  theme_bw() +
#  scale_color_brewer(type="qual") +
  scale_color_manual(values = c(oranges[2], greens[2], purples[2]))  +
  theme(legend.position = "none") +
  ylab("") +
  theme(axis.title.y = NULL, axis.text.y = NULL, axis.ticks.y = NULL) +
  scale_y_continuous(labels=c("low", "", "medium", "", "high"),
                     breaks=c(0,0.25, .5,.75, 1)) +
  scale_x_discrete("",expand = expansion(add=0.25),
                   labels=c("Bill length", "Bill depth",
                            "Flipper length", "Body mass",
                            "k=3 Clusters", "Species")) +
  ggtitle("Clustering into 3 groups")


@

<<cl4, fig.cap="The fourth cluster splits Adelie penguins (mostly) into males and females of the species.", fig.height = 4, fig.width = 8, include = F>>=
penguins_complete %>%
  mutate(
    cl4 = reorder(cl4, body_mass_g, mean)
  ) %>%
  pcp_select(bill_length_mm:body_mass_g, cl4, species, sex) %>%
  pcp_scale() %>%
  pcp_arrange() %>%
  ggplot(aes_pcp()) +
  geom_pcp(aes(color=cl4), alpha = 0.6) +
  geom_pcp_boxes(fill=NA) +
  geom_pcp_labels() +
  theme_bw() +
#  scale_color_brewer(type="qual") +
    scale_color_manual(values = c(oranges[1], greens[2], oranges[3], purples[2]))  +
  theme(legend.position = "none") +
  ylab("") +
  theme(axis.title.y = NULL, axis.text.y = NULL, axis.ticks.y = NULL) +
  scale_y_continuous(labels=c("low", "", "medium", "", "high"),
                     breaks=c(0,0.25, .5,.75, 1)) +
  scale_x_discrete("",expand = expansion(add=0.25),
                   labels=c("Bill length", "Bill depth",
                            "Flipper length", "Body mass",
                            "k=4 Clusters", "Species")) +
  ggtitle("Clustering into 4 groups")

@

<<cl5, fig.cap="The fifth cluster splits the group of Chinstrap penguins (mostly) into females and males. Only a handful of individual penguins are grouped with the wrong species or tge wrong sex. One Chinstrap male from cluster 2 is grouped with females. This might  be an example of a 'femboy' (males that appear phenotypically like females) known in the penguin research literature \\hh{XXX cite!}", fig.height = 4, fig.width = 8, include = F>>=
penguins_complete_pcp <- penguins_complete %>%
  mutate(
    cl5 = reorder(cl5, body_mass_g, mean)
  ) %>%
  pcp_select(bill_length_mm:body_mass_g, cl5, species, sex) %>%
  pcp_scale() %>%
  pcp_arrange()

penguins_complete_pcp %>%
  ggplot(aes_pcp()) +
  geom_pcp(aes(color=cl5), alpha = 0.6,
           data = filter(penguins_complete_pcp,
                         species != "Chinstrap")) +
  geom_pcp(aes(color=cl5), alpha = 0.6,
           data = filter(penguins_complete_pcp,
                         species == "Chinstrap")) +
  geom_pcp_boxes(fill=NA) +
  geom_pcp_labels() +
  theme_bw() +
    scale_color_manual(
      values = c(oranges[1], greens[1], greens[3], oranges[3], purples[2])) +
  theme(legend.position = "none") +
  ylab("") +
  theme(axis.title.y = NULL, axis.text.y = NULL, axis.ticks.y = NULL) +
  scale_y_continuous(labels=c("low", "", "medium", "", "high"),
                     breaks=c(0,0.25, .5,.75, 1)) +
  scale_x_discrete("",expand = expansion(add=0.25),
                   labels=c("Bill length", "Bill depth",
                            "Flipper length", "Body mass",
                            "k=5 Clusters", "Species")) +
  ggtitle("Clustering into 5 groups")
@

<<cl6, fig.cap="The sixth cluster does...", fig.height = 4, fig.width = 8, include = F>>=
penguins_complete_pcp <- penguins_complete %>%
  mutate(
    cl6 = reorder(cl6, body_mass_g, mean)
  ) %>%
  pcp_select(bill_length_mm:body_mass_g, cl6, species, sex) %>%
  pcp_scale() %>%
  pcp_arrange()

penguins_complete_pcp %>%
  ggplot(aes_pcp()) +
  geom_pcp(aes(color=cl6), alpha = 0.6,
           data = filter(penguins_complete_pcp, species != "Gentoo")) +
  geom_pcp(aes(color=cl6), alpha = 0.6,
           data = filter(penguins_complete_pcp, species == "Gentoo")) +
  geom_pcp_boxes(fill=NA) +
  geom_pcp_labels() +
  theme_bw() +
#  scale_color_brewer(type="qual") +
    scale_color_manual(values = c(oranges[1], greens[2], oranges[2], oranges[3], purples[1], purples[3]))  +
  theme(legend.position = "none") +
  ylab("") +
  theme(axis.title.y = NULL, axis.text.y = NULL, axis.ticks.y = NULL) +
  scale_y_continuous(labels=c("low", "", "medium", "", "high"),
                     breaks=c(0,0.25, .5,.75, 1)) +
  scale_x_discrete("",expand = expansion(add=0.25),
                   labels=c("Bill length", "Bill depth",
                            "Flipper length", "Body mass",
                            "k=6 Clusters", "Species")) +
  ggtitle("Clustering into 6 groups")
@

% \Cref{fig:cl2} shows a parallel coordinate plot relating the separation of body measurements into two main groups to each measurement variable and the three species.
\begin{figure}
     \centering
     \begin{subfigure}[b]{.8\textwidth}
         \centering
         \includegraphics[keepaspectratio=true,width=\linewidth]{figures/cl2-1}
         \caption{When $k=2$, Gentoo penguins are separated from Adele and Chinstrap penguins.}
         \label{fig:penguink2}
     \end{subfigure}
\\
     \begin{subfigure}[t]{0.48\textwidth}
         \centering
         \includegraphics[keepaspectratio=true,width=\linewidth]{figures/cl3-1}
         \caption{The third cluster splits the former second cluster into two based on the length of the bill. The three species are almost perfectly separated in using three clusters.}
         \label{fig:penguink3}
     \end{subfigure}
\hfill
     \begin{subfigure}[t]{0.48\textwidth}
         \centering
         \includegraphics[keepaspectratio=true,width=\linewidth]{figures/cl4-1}
         \caption{The fourth cluster splits Adelie penguins (mostly) into males and females of the species.}
         \label{fig:penguink4}
     \end{subfigure}
\\
     \begin{subfigure}[t]{0.48\textwidth}
         \centering
         \includegraphics[keepaspectratio=true,width=\linewidth]{figures/cl5-1}
         \caption{The fifth cluster splits the group of Chinstrap penguins (mostly) into females and males. Only a handful of individual penguins are grouped with the wrong species or the wrong sex.}
         \label{fig:penguink5}
     \end{subfigure}
\hfill
     \begin{subfigure}[t]{0.48\textwidth}
         \centering
         \includegraphics[keepaspectratio=true,width=\linewidth]{figures/cl6-1}
         \caption{With the introduction of a sixth cluster, all previous clusters change: Gentoo penguins are split into males and females. The sex separation for Chinstrap penguins gets lost, but  Adelie males get split into two separate clusters. }
         \label{fig:penguink6}
     \end{subfigure}
        \caption{An overview of the use of parallel coordinate plots to examine which variables contribute to clustering and to identify individuals who are misclassified.}
        \label{fig:kmean-penguins}
\end{figure}

<<cl-overview-2, fig.cap="Comparison of eight $k$-means runs for $k=6$. Color of lines is given by species and sex. The differences between the clusters are introduced by the different random seeds in the inital cluster centers.", fig.height = 4, fig.width = 8>>=
set.seed(20220901)
clusters6 <- tibble(k = rep(6, 7))
clusters6 <- clusters6 %>% mutate(
  kmeans_cl = k %>% purrr::map(.f = function(cl) {
    kmeans(penguins_complete %>%
             select(bill_length_mm:body_mass_g) %>%
             mutate(
               across(.fns = scale)
             ), centers=cl)
  })
)

penguins_complete$cl6b <- clusters6$kmeans_cl[[1]]$cluster
penguins_complete$cl6c <- clusters6$kmeans_cl[[2]]$cluster
penguins_complete$cl6d <- clusters6$kmeans_cl[[3]]$cluster
penguins_complete$cl6e <- clusters6$kmeans_cl[[4]]$cluster
penguins_complete$cl6f <- clusters6$kmeans_cl[[5]]$cluster
penguins_complete$cl6g <- clusters6$kmeans_cl[[6]]$cluster
penguins_complete$cl6h <- clusters6$kmeans_cl[[7]]$cluster

penguins_complete <- penguins_complete %>% mutate(
  across(starts_with("cl6"), as.factor),
  across(starts_with("cl6"), .fns = function(cl) {
    cl <- reorder(cl, as.numeric(species:sex), mean)
    levels(cl) <- 1:length(levels(cl))
    cl
  })
)

penguins_complete %>%
  pcp_select(starts_with("cl6"), species, sex) %>%
  pcp_scale() %>%
  pcp_arrange() %>%
  ggplot(aes_pcp()) +
    geom_pcp(aes(color=interaction(sex, species)), alpha = 0.6) +
    geom_pcp_boxes(fill=NA, colour = "black", size = .5) +
    geom_pcp_labels(alpha = 0.9) +
  theme_bw() +
#  scale_color_brewer(type="qual", palette = "Paired") +
  # scale_color_manual(values = c("#fdbf6f", "#ff7f00",
  #                               "#cab2d6", "#6a3d9a",
  #                               "#b2df8a", "#33a02c")) +
  scale_color_manual(values = c(greens[c(1,3)], oranges[c(1,3)], purples[c(1,3)])) +
  theme(legend.position = "none") +
  ylab("") +
  theme(axis.title.y = NULL, axis.text.y = NULL, axis.ticks.y = NULL) +
  # scale_y_continuous(labels=c("low", "", "medium", "", "high"),
  #                    breaks=c(0,0.25, .5,.75, 1)) +
  scale_y_continuous(breaks = NULL) +
  scale_x_discrete("",expand = expansion(add=0.5))

@

<<cl-overview, eval=FALSE, fig.cap="Overview of all clusters for $k$=2 to 6.", fig.height = 4, fig.width = 8>>=
penguins_complete %>%
    mutate(
    across(starts_with("cl"), .fns = function(x) reorder(x, body_mass_g, mean))
  ) %>%
  select(-c(cl7, cl8)) %>%
  pcp_select(starts_with("cl"), species, sex) %>%
  pcp_scale() %>%
  pcp_arrange(space = 0.1) %>%
  ggplot(aes_pcp()) +
    geom_pcp(aes(color=interaction(sex, species)), alpha = 0.6, axiswidth = c(0, 0.1)) +
    geom_pcp_boxes(fill=NA) +
    geom_pcp_labels() +
  theme_bw() +
  scale_color_manual(values = c(purples[1], purples[3], oranges[1], oranges[3], greens[1], greens[3])) +
  theme(legend.position = "none") +
  ylab("") +
  theme(axis.title.y = NULL, axis.text.y = NULL, axis.ticks.y = NULL) +
  # scale_y_continuous(labels=c("low", "", "medium", "", "high"),
  #                    breaks=c(0,0.25, .5,.75, 1)) +
  scale_y_continuous(breaks = NULL) +
  scale_x_discrete("",expand = expansion(add=0.25))


#FF8C00 "darkorange"
#551A8B "purple4"
#006400 "darkgreen"
@


\section{Discussion}

This paper describes generalized parallel coordinate plots, which extend parallel coordinate plots to include categorical variables. This extension is a significant development: GPCPs are useful in a wide variety of scenarios where standard PCPs were insufficient; in addition, the handling of categorical variables introduced as part of the \pkg{ggpcp} implementation of GPCPs opens up many new areas for PCP-related research.

The most consequential feature of GPCPs as implemented in the \pkg{ggpcp} package is the ability to follow a single observation through multiple categorical and continuous axes. This continuity provides a perceptual advantage over other alternatives even for plots of only categorical variables, as it is possible to visually assess $N>2$-dimensional contingent relationships using GPCPs, as demonstrated in \Cref{fig:cl-overview-2}. Throughout the examples in this paper, we have attempted to showcase the impacts of this visual continuity through a range of different applications of GPCPs. We have attempted to assemble a broad set of such examples, but we expect that GPCPs will be useful in many other applications.

%\hh{XXX We could expand on each of the examples, but I don't think we actually have to.  XXX Using generalized parallel coordinate plots and item sorting allows us to assess the stability of clustering results.}

As a consequence of the line continuity in generalized PCPs, we also highlight the importance of four different types of ordering: axes, factors, lines, and plotting. While previous papers have examined the impact of axis ordering, there is a large increase in the importance of factor, line, and plotting order to preserve the line continuity afforded by GPCPs. The \pkg{ggpcp} framework allows the ordering of factors, lines, and plotting to carry additional information which affects the user's ability to understand the data. These factors, along with the use of color in PCPs, deserve much more investigation and consideration than the brief overview provided in this paper, which is focused on demonstrating the \pkg{ggpcp} API.


\hh{While the decision to move the data wrangling ahead of the call to `ggplot` was initially a technical work-around to comply with the grammar based restriction of the one-to-one mapping of one variable to one aesthetic, this split provides us with a slew of benefits.}

\begin{enumerate}
\item {\bf Speed: } \hh{moving the data wrangling out of the inner workings of `ggplot2` removes the necessity to repeat this step each layer. This results in a considerable speed up for larger datasets or more intricate plots with multiple layers.
}

\hh{Generally,
any data summary or modifications needed to be made of the data, are implemented in so called *statistics* functions, named `stat\_xxx`, where `xxx` is usually the name of the corresponding geom to capture the close relationship between the `geom\_xxx` and the `stat\_xxx` functions.
For example, in `stat\_boxplot` the summaries necessary for visualizing the corresponding boxplot are calculated.
 `stat\_bin` is the default statistics associated with histograms: continuous variables are binned and a frequency count is being visualized.
A `stat\_pcp` data function would therefore have to deal with the translation from a the user-friendly wide dataset to the technically motivated  long form of the data that allows a direct mapping of one variable to the $x$ axis (implemented as `pcp\_x`) and another variable to the $y$ axis (implemented as `pcp\_y`).}

\hh{
Obviously, we decided against an implementation of this `stat\_pcp` function, resulting in the need to wrangle the original data into the correct format ahead of the call to ggplot. However, this leads to a second benefit:}
\item{\bf Transparency and Flexibility: }\hh{
by modularizing and exposing the data wrangling pipeline into individual steps, we  created a better conceptual framework and  allow more flexibility for users to make changes:  the user can interact with and modify intermediate results at each step.
}
\item{\bf Reducing the clutter: }\hh{
most parallel coordinate plot functions come with a LOT of parameters -- many of them aimed at controlling the exact layout of the plot, dealing with considerations such  as e.g. `showPoints`  draw points?  or `boxplot` draw a boxplot?
All of these parameters become unnecessary in the ggpcp implementation because of the direct availability of the ggplot2 layer system. So, should there be a need for boxplot, a simple call to `geom\_boxplot` will draw them, and depending on whether this call happens before or after a call to `geom\_pcp`, the boxplots end up in the back or on top of the lines. Similarly, we can deal with points, or separately drawn lines on top (e.g. to show a median cluster point).}

\hh{Modularizing the code for data wrangling and visualizing has the additional advantage that remaining  parameters for parallel coordinate plots can now be moved directly into the relevant functions. This helps with the meaning of the parameter as well as seemingly redundant calls to parameters in every layer when defaults are changed to ensure that all layers are based on the same data. XXX is that too cryptic?
}
\end{enumerate}

The implementation of GPCPs provided in the \pkg{ggpcp} package neatly separates data management from visual rendering while leveraging the \pkg{ggplot2} API. Both of these features contribute to the power and flexibility of the \pkg{ggpcp} package.


% ggpcp contributions
%
% - The generalized framework includes other styles of PCPs as edge cases, but we open up so many more applications for PCPs with the generalized framework. The potential uses of parallel coordinate plots are much broader than previously demonstrated. In this paper, we attempt to showcase some of these new applications, and we expect that we have missed the opportunity to use PCPs in many other areas.
%
% - The addition of line continuity by generalized PCPs emphasizes the importance of the ordering of axes, factors, lines, and plotting. ggpcp's framework adds additional dimensions of complexity to PCP creation that should be studied more carefully. Axis ordering has been previously studied, but the ggpcp framework allows the ordering of factors, lines, and plotting to carry additional information that affects the user's ability to understand the data.
%
% \au{Generalized parallel coordinate plots offer a constructive solution to incorporating categorical variables in parallel coordinate plots.  In particular, they preserve the key idea of being able to follow individual cases across the plot.  As always with parallel coordinate plots, the use of color to distinguish groups, the ordering of the axes, and the ordering of drawing the lines play key roles.  With generalized parallel coordinate plots two additional kinds of ordering have a part to play: the ordering of levels of categorical variables, and the ordering of cases within those levels.}
%
% \au{The ideas described here have been implemented in the R package ggpcp.  There are two central features: data management has been separated from visual rendering, and the package follows the full ggplot2 philosophy. Both these features contribute to the power and flexibility of the software.
% }
%
% \svp{In our demonstration of generalized parallel coordinate plots as implemented in \pkg{ggpcp}, we have also explored the use of generalized parallel coordinate plots for assessing inter-rater agreement, cluster stability, and assessment of missing information. GPCPs are a powerful tool for exploring high-dimensional data.}



%----------------------------------------------------------------------------------------
%	REFERENCE LIST
%----------------------------------------------------------------------------------------


\bibliography{refs.bib}

%----------------------------------------------------------------------------------------
% \begin{appendix}
% \section{Example usage}
% Commented code for \Cref{fig:carcinoma}:
% <<code-figure, eval=FALSE, echo=TRUE, reset=TRUE>>=
% data(carcinoma, package = "poLCA")
%
% # Prepping the Dataset
% carcinoma$total <- rowSums(carcinoma) - 7
% carcinoma <- carcinoma %>% mutate(
%   across(A:G, .fns = as.factor)
% )
%
% carcinoma %>%
%
% # Selecting and scaling variables
% pcp_select(F, D, C, A, G, E, B, tot) %>%
% pcp_scale(method="uniminmax") %>%
% pcp_arrange() %>%
%
% # Setting up ggplot for pcp and setting pcp display options
% ggplot(aes_pcp()) +
% geom_pcp_axes() +
% geom_pcp_boxes(colour="black", alpha=0) +
% geom_pcp(aes(colour = tot)) +
% geom_pcp_labels(aes(label = pcp_level), fill="white", alpha = 1) +
%
% # Choosing general ggplot display options
% scale_colour_brewer("Number of\ncarcinoma\ndiagnoses", palette ="Dark2") +
% theme_bw() +
% guides(color = guide_legend(reverse=TRUE, override.aes = list(size = 5))) +
% scale_x_discrete(expand = expansion(add=0.25)) +
% xlab(NULL) + ylab(NULL) +
% theme(axis.text.y=element_blank(), axis.ticks.y=element_blank())
% @
% \end{appendix}

\end{document}
